interface PageViewEvent {
    type: 'pageview';
    url: string;
}
declare type Event = PageViewEvent;
declare type Mode = 'auto' | 'development' | 'production';
declare type AllowedPropertyValues = string | number | boolean | null;
declare type BeforeSend = (event: Event) => Event | null;
interface AnalyticsProps {
    beforeSend?: BeforeSend;
    debug?: boolean;
    mode?: Mode;
}
declare global {
    interface Window {
        va?: (event: 'beforeSend' | 'event', properties?: unknown) => void;
        vaq?: [string, unknown?][];
        vai?: boolean;
        vam?: Mode;
    }
}

declare const inject: (props?: AnalyticsProps) => void;
declare const track: (name: string, properties?: Record<string, AllowedPropertyValues>) => void;
declare const _default: {
    inject: (props?: AnalyticsProps) => void;
    track: (name: string, properties?: Record<string, AllowedPropertyValues> | undefined) => void;
};

export { _default as default, inject, track };
